# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cxx}
decl {\#include "ClabLogic.h"} {private global
}

decl {\#include "Fl_Text_Editor_C.h"} {public global
}

decl {\#include "Fl_Text_Editor_Asm.h"} {public global
}

class UserInterfaceBlah {open
} {}

class ClabGui {open
} {
  Function {make_window()} {open
  } {
    Fl_Window {} {
      label {Compiler Lab} open
      xywh {395 132 1032 748} type Double visible
    } {
      Fl_Text_Editor srcCode {
        xywh {4 134 510 505} align 21 textfont 4
        code0 {srcBuf = new Fl_Text_Buffer();}
        code1 {o->buffer(srcBuf);}
        code3 {srcBuf->add_modify_callback(onSourceModified, this);}
        class Fl_Text_Editor_C
      }
      Fl_Text_Editor asmCode {
        xywh {517 134 508 505} labelfont 4 labelsize 10 textfont 4 textsize 12
        code0 {asmBuf = new Fl_Text_Buffer();}
        code1 {o->buffer(asmBuf);}
        class Fl_Text_Editor_Asm
      }
      Fl_Text_Display outLog {
        xywh {4 644 1022 100} box THIN_DOWN_FRAME color 0 textfont 4 textsize 12 textcolor 7
        code0 {outBuf = new Fl_Text_Buffer();}
        code1 {o->buffer(outBuf);}
      }
      Fl_Tabs {} {open
        xywh {4 6 644 124}
      } {
        Fl_Group clangGroup {
          label clang open
          xywh {6 25 369 105} hide
        } {
          Fl_Input_Choice icOptimization {
            label {optimization:}
            callback {recompile();} open
            xywh {90 56 107 24}
          } {}
          Fl_Input_Choice icCompiler {
            label {compiler:}
            callback {recompile();} open
            xywh {90 29 263 24}
          } {}
          Fl_Check_Button btnVerbose {
            label verbose
            callback {recompile();}
            xywh {289 102 28 28} down_box DOWN_BOX
          }
          Fl_Input_Choice icDebug {
            label {debug:}
            callback {recompile();} open
            xywh {246 56 107 24}
          } {}
          Fl_Round_Button btnC {
            label C
            callback {onButtonC();}
            xywh {16 102 28 28} down_box ROUND_DOWN_BOX
          }
          Fl_Round_Button btnCPP {
            label {C++}
            callback {onButtonCPP();}
            xywh {54 102 28 28} down_box ROUND_DOWN_BOX
          }
        }
        Fl_Group {} {
          label gcc open
          xywh {9 35 464 84} hide
        } {}
        Fl_Group {} {
          label {visual studio} open
          xywh {9 35 236 85}
        } {}
      }
      Fl_Text_Display compilerCommandLine {
        label {compiler command line:}
        xywh {652 66 375 38} color 0 align 5 textfont 4 textsize 12 textcolor 7
        code0 {clBuf = new Fl_Text_Buffer();}
        code1 {o->buffer(clBuf);}
        code2 {o->wrap_mode(Fl_Text_Display::WRAP_AT_BOUNDS, 0);}
      }
      Fl_Text_Editor customFlags {
        label {custom flags:}
        callback {recompile();}
        xywh {652 18 375 26} align 5 textsize 12
        code0 {customFlagsBuf = new Fl_Text_Buffer();}
        code1 {o->buffer(customFlagsBuf);}
      }
      Fl_Group {} {
        label {output settings:} open
        xywh {753 105 194 28} color 0 align 4
      } {
        Fl_Check_Button btnWrap {
          label wrap
          callback {recompile();}
          xywh {753 105 28 28} down_box DOWN_BOX
        }
        Fl_Check_Button btnScroll {
          label scroll
          callback {recompile()}
          xywh {805 105 72 28} down_box DOWN_BOX
        }
        Fl_Check_Button btnStdout {
          label stdout
          callback {recompile();}
          xywh {859 105 28 28} down_box DOWN_BOX
        }
        Fl_Check_Button btnStderr {
          label stderr
          callback {recompile();}
          xywh {919 105 28 28} down_box DOWN_BOX
        }
      }
    }
    code {srcCode->linenumber_width(24);} {}
  }
  decl {Fl_Text_Buffer *srcBuf;} {public local
  }
  decl {Fl_Text_Buffer *asmBuf;} {public local
  }
  decl {Fl_Text_Buffer *outBuf;} {public local
  }
  decl {Fl_Text_Buffer *customFlagsBuf;} {public local
  }
  decl {Fl_Text_Buffer *clBuf;} {public local
  }
}

Function {} {open
} {
  code {ClabGui gui;
Fl_Double_Window *w = gui.make_window();
onGuiFinished(&gui);
//Fl::add_idle(onIdle, &gui);
w->end();
w->show();
int rc = Fl::run();
onExit();
return rc;
/* fluid will insert Fl::run() here... */} {selected
  }
}
