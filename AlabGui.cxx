// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "AlabGui.h"
#include "AlabLogic.h"

void AlabGui::cb_icPresets_i(Fl_Input_Choice*, void*) {
  onConfigSelection();
}
void AlabGui::cb_icPresets(Fl_Input_Choice* o, void* v) {
  ((AlabGui*)(o->parent()->parent()->user_data()))->cb_icPresets_i(o,v);
}

void AlabGui::cb_icExamples_i(Fl_Input_Choice*, void*) {
  onExampleSelection();
}
void AlabGui::cb_icExamples(Fl_Input_Choice* o, void* v) {
  ((AlabGui*)(o->parent()->user_data()))->cb_icExamples_i(o,v);
}

void AlabGui::cb_cbAtt_i(Fl_Check_Button*, void*) {
  onDialectChange();
}
void AlabGui::cb_cbAtt(Fl_Check_Button* o, void* v) {
  ((AlabGui*)(o->parent()->user_data()))->cb_cbAtt_i(o,v);
}

Fl_Double_Window* AlabGui::make_window() {
  { mainWindow = new Fl_Double_Window(1032, 713, "Assembler Lab");
    mainWindow->user_data((void*)(this));
    { menuBar = new Fl_Menu_Bar(0, 0, 1032, 20, "menu");
      menuBar->color((Fl_Color)29);
    } // Fl_Menu_Bar* menuBar
    { Fl_Text_Editor_Asm* o = srcCode = new Fl_Text_Editor_Asm(4, 103, 510, 505);
      srcCode->box(FL_DOWN_FRAME);
      srcCode->color(FL_BACKGROUND2_COLOR);
      srcCode->selection_color(FL_SELECTION_COLOR);
      srcCode->labeltype(FL_NORMAL_LABEL);
      srcCode->labelfont(0);
      srcCode->labelsize(14);
      srcCode->labelcolor(FL_FOREGROUND_COLOR);
      srcCode->textfont(4);
      srcCode->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      srcCode->when(FL_WHEN_RELEASE);
      srcBuf = new Fl_Text_Buffer();
      o->buffer(srcBuf);
      srcBuf->text("testes");
      srcBuf->add_modify_callback(onSourceModified, this);
    } // Fl_Text_Editor_Asm* srcCode
    { Fl_Text_Editor* o = asmCode = new Fl_Text_Editor(517, 103, 510, 505);
      asmCode->box(FL_DOWN_FRAME);
      asmCode->color(FL_BACKGROUND2_COLOR);
      asmCode->selection_color(FL_SELECTION_COLOR);
      asmCode->labeltype(FL_NORMAL_LABEL);
      asmCode->labelfont(4);
      asmCode->labelsize(10);
      asmCode->labelcolor(FL_FOREGROUND_COLOR);
      asmCode->textfont(4);
      asmCode->textsize(12);
      asmCode->align(Fl_Align(FL_ALIGN_TOP));
      asmCode->when(FL_WHEN_RELEASE);
      bytesBuf = new Fl_Text_Buffer();
      o->buffer(bytesBuf);
    } // Fl_Text_Editor* asmCode
    { Fl_Group* o = new Fl_Group(276, 39, 750, 57, "Configuration String / Triple / Triplet:");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { oArch = new Fl_Output(507, 66, 84, 24, "arch:");
        oArch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oArch
      { oSubArch = new Fl_Output(593, 66, 84, 24, "subarch:");
        oSubArch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oSubArch
      { oOs = new Fl_Output(765, 66, 84, 24, "os:");
        oOs->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oOs
      { oEnviron = new Fl_Output(851, 66, 84, 24, "environ:");
        oEnviron->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oEnviron
      { oFormat = new Fl_Output(937, 66, 84, 24, "format:");
        oFormat->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oFormat
      { icPresets = new Fl_Input_Choice(282, 66, 221, 24, "presets:");
        icPresets->callback((Fl_Callback*)cb_icPresets);
        icPresets->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Input_Choice* icPresets
      { oVendor = new Fl_Output(679, 66, 84, 24, "vendor:");
        oVendor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oVendor
      o->end();
    } // Fl_Group* o
    { icExamples = new Fl_Input_Choice(5, 39, 259, 24, "examples:");
      icExamples->callback((Fl_Callback*)cb_icExamples);
      icExamples->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input_Choice* icExamples
    { log = new Fl_Text_Display_Log(4, 612, 1023, 96);
      log->box(FL_DOWN_FRAME);
      log->color(FL_BACKGROUND2_COLOR);
      log->selection_color(FL_SELECTION_COLOR);
      log->labeltype(FL_NORMAL_LABEL);
      log->labelfont(0);
      log->labelsize(14);
      log->labelcolor(FL_FOREGROUND_COLOR);
      log->align(Fl_Align(FL_ALIGN_TOP));
      log->when(FL_WHEN_RELEASE);
    } // Fl_Text_Display_Log* log
    { cbAtt = new Fl_Check_Button(176, 65, 28, 28, "at&&t syntax");
      cbAtt->down_box(FL_DOWN_BOX);
      cbAtt->callback((Fl_Callback*)cb_cbAtt);
    } // Fl_Check_Button* cbAtt
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
  srcCode->linenumber_width(24);
  return mainWindow;
}

int main(int argc, char **argv) {
  AlabGui gui;
  Fl_Double_Window *w = gui.make_window();
  onGuiFinished(&gui);
  Fl::add_idle(onIdle, &gui);
  w->end();
  w->show();
  int rc = Fl::run();
  onExit();
  return rc;
  /* fluid will insert Fl::run() here... */
  return Fl::run();
}
