// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "AlabGui.h"
#include "AlabLogic.h"

void AlabGui::cb_icPresets_i(Fl_Input_Choice*, void*) {
  onConfigSelection();
}
void AlabGui::cb_icPresets(Fl_Input_Choice* o, void* v) {
  ((AlabGui*)(o->parent()->parent()->user_data()))->cb_icPresets_i(o,v);
}

Fl_Double_Window* AlabGui::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(1032, 593, "Assembler Lab");
    w = o;
    o->user_data((void*)(this));
    { Fl_Text_Editor_Asm* o = srcCode = new Fl_Text_Editor_Asm(4, 81, 510, 505);
      srcCode->box(FL_DOWN_FRAME);
      srcCode->color(FL_BACKGROUND2_COLOR);
      srcCode->selection_color(FL_SELECTION_COLOR);
      srcCode->labeltype(FL_NORMAL_LABEL);
      srcCode->labelfont(0);
      srcCode->labelsize(14);
      srcCode->labelcolor(FL_FOREGROUND_COLOR);
      srcCode->textfont(4);
      srcCode->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      srcCode->when(FL_WHEN_RELEASE);
      srcBuf = new Fl_Text_Buffer();
      o->buffer(srcBuf);
      srcBuf->text("testes");
      srcBuf->add_modify_callback(onSourceModified, this);
    } // Fl_Text_Editor_Asm* srcCode
    { Fl_Text_Editor* o = asmCode = new Fl_Text_Editor(517, 81, 508, 505);
      asmCode->box(FL_DOWN_FRAME);
      asmCode->color(FL_BACKGROUND2_COLOR);
      asmCode->selection_color(FL_SELECTION_COLOR);
      asmCode->labeltype(FL_NORMAL_LABEL);
      asmCode->labelfont(4);
      asmCode->labelsize(10);
      asmCode->labelcolor(FL_FOREGROUND_COLOR);
      asmCode->textfont(4);
      asmCode->textsize(12);
      asmCode->align(Fl_Align(FL_ALIGN_TOP));
      asmCode->when(FL_WHEN_RELEASE);
      asmBuf = new Fl_Text_Buffer();
      o->buffer(asmBuf);
    } // Fl_Text_Editor* asmCode
    { Fl_Group* o = new Fl_Group(5, 21, 1020, 58, "Configuration String:");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { oArch = new Fl_Output(235, 44, 84, 24, "arch:");
        oArch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oArch
      { oSubArch = new Fl_Output(321, 44, 84, 24, "subarch:");
        oSubArch->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oSubArch
      { oOs = new Fl_Output(493, 44, 84, 24, "os:");
        oOs->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oOs
      { oEnviron = new Fl_Output(579, 44, 84, 24, "environ:");
        oEnviron->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oEnviron
      { oFormat = new Fl_Output(665, 44, 84, 24, "format:");
        oFormat->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oFormat
      { icPresets = new Fl_Input_Choice(10, 44, 221, 24, "presets:");
        icPresets->callback((Fl_Callback*)cb_icPresets);
        icPresets->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Input_Choice* icPresets
      { oVendor = new Fl_Output(407, 44, 84, 24, "vendor:");
        oVendor->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Output* oVendor
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  srcCode->linenumber_width(24);
  return w;
}

int main(int argc, char **argv) {
  AlabGui gui;
  Fl_Double_Window *w = gui.make_window();
  onGuiFinished(&gui);
  Fl::add_idle(onIdle, &gui);
  w->end();
  w->show();
  int rc = Fl::run();
  onExit();
  return rc;
  /* fluid will insert Fl::run() here... */
  return Fl::run();
}
