// generated by Fast Light User Interface Designer (fluid) version 1.0303

#include "Gui.h"
#include "logic.h"

void Gui::cb_icOptimization_i(Fl_Input_Choice*, void*) {
  recompile();
}
void Gui::cb_icOptimization(Fl_Input_Choice* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_icOptimization_i(o,v);
}

void Gui::cb_icCompiler_i(Fl_Input_Choice*, void*) {
  recompile();
}
void Gui::cb_icCompiler(Fl_Input_Choice* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_icCompiler_i(o,v);
}

void Gui::cb_btnVerbose_i(Fl_Check_Button*, void*) {
  recompile();
}
void Gui::cb_btnVerbose(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_btnVerbose_i(o,v);
}

void Gui::cb_icDebug_i(Fl_Input_Choice*, void*) {
  recompile();
}
void Gui::cb_icDebug(Fl_Input_Choice* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_icDebug_i(o,v);
}

void Gui::cb_btnC_i(Fl_Round_Button*, void*) {
  onButtonC();
}
void Gui::cb_btnC(Fl_Round_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_btnC_i(o,v);
}

void Gui::cb_btnCPP_i(Fl_Round_Button*, void*) {
  onButtonCPP();
}
void Gui::cb_btnCPP(Fl_Round_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->parent()->user_data()))->cb_btnCPP_i(o,v);
}

void Gui::cb_customFlags_i(Fl_Text_Editor*, void*) {
  recompile();
}
void Gui::cb_customFlags(Fl_Text_Editor* o, void* v) {
  ((Gui*)(o->parent()->user_data()))->cb_customFlags_i(o,v);
}

void Gui::cb_btnWrap_i(Fl_Check_Button*, void*) {
  recompile();
}
void Gui::cb_btnWrap(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_btnWrap_i(o,v);
}

void Gui::cb_btnScroll_i(Fl_Check_Button*, void*) {
  recompile();
}
void Gui::cb_btnScroll(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_btnScroll_i(o,v);
}

void Gui::cb_btnStdout_i(Fl_Check_Button*, void*) {
  recompile();
}
void Gui::cb_btnStdout(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_btnStdout_i(o,v);
}

void Gui::cb_btnStderr_i(Fl_Check_Button*, void*) {
  recompile();
}
void Gui::cb_btnStderr(Fl_Check_Button* o, void* v) {
  ((Gui*)(o->parent()->parent()->user_data()))->cb_btnStderr_i(o,v);
}

Fl_Double_Window* Gui::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(1032, 748, "Compiler Lab");
    w = o;
    o->user_data((void*)(this));
    { Fl_Text_Editor* o = srcCode = new Fl_Text_Editor(4, 4, 396, 596);
      srcCode->textfont(4);
      srcCode->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      srcBuf = new Fl_Text_Buffer();
      o->buffer(srcBuf);
      srcBuf->text("#include <stdio.h>\n\nint main(int ac, char **av)\n{\n\tprintf(\"Hello, world!\\n\");\n\treturn 0;\n}");
      srcBuf->add_modify_callback(onSourceModified, this);
    } // Fl_Text_Editor* srcCode
    { Fl_Text_Display* o = asmCode = new Fl_Text_Display(404, 4, 246, 596);
      asmCode->labelfont(4);
      asmCode->labelsize(10);
      asmCode->textfont(4);
      asmCode->textsize(12);
      asmBuf = new Fl_Text_Buffer();
      o->buffer(asmBuf);
    } // Fl_Text_Display* asmCode
    { Fl_Text_Display* o = outLog = new Fl_Text_Display(4, 604, 1022, 140);
      outLog->box(FL_THIN_DOWN_FRAME);
      outLog->color(FL_FOREGROUND_COLOR);
      outLog->textfont(4);
      outLog->textsize(12);
      outLog->textcolor(FL_BACKGROUND2_COLOR);
      outBuf = new Fl_Text_Buffer();
      o->buffer(outBuf);
    } // Fl_Text_Display* outLog
    { Fl_Tabs* o = new Fl_Tabs(655, 4, 375, 374);
      { clangGroup = new Fl_Group(657, 34, 369, 344, "clang");
        { icOptimization = new Fl_Input_Choice(750, 74, 107, 24, "optimization:");
          icOptimization->callback((Fl_Callback*)cb_icOptimization);
        } // Fl_Input_Choice* icOptimization
        { icCompiler = new Fl_Input_Choice(749, 44, 263, 24, "compiler");
          icCompiler->callback((Fl_Callback*)cb_icCompiler);
        } // Fl_Input_Choice* icCompiler
        { btnVerbose = new Fl_Check_Button(940, 100, 28, 28, "verbose");
          btnVerbose->down_box(FL_DOWN_BOX);
          btnVerbose->callback((Fl_Callback*)cb_btnVerbose);
        } // Fl_Check_Button* btnVerbose
        { icDebug = new Fl_Input_Choice(905, 74, 107, 24, "debug:");
          icDebug->callback((Fl_Callback*)cb_icDebug);
        } // Fl_Input_Choice* icDebug
        { btnC = new Fl_Round_Button(667, 100, 28, 28, "C");
          btnC->down_box(FL_ROUND_DOWN_BOX);
          btnC->callback((Fl_Callback*)cb_btnC);
        } // Fl_Round_Button* btnC
        { btnCPP = new Fl_Round_Button(705, 100, 28, 28, "C++");
          btnCPP->down_box(FL_ROUND_DOWN_BOX);
          btnCPP->callback((Fl_Callback*)cb_btnCPP);
        } // Fl_Round_Button* btnCPP
        clangGroup->end();
      } // Fl_Group* clangGroup
      { Fl_Group* o = new Fl_Group(660, 33, 352, 338, "gcc");
        o->hide();
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(660, 33, 352, 338, "visual studio");
        o->hide();
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Text_Display* o = compilerCommandLine = new Fl_Text_Display(655, 450, 375, 124, "compiler command line:");
      compilerCommandLine->color(FL_FOREGROUND_COLOR);
      compilerCommandLine->textfont(4);
      compilerCommandLine->textsize(12);
      compilerCommandLine->textcolor(FL_BACKGROUND2_COLOR);
      compilerCommandLine->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      clBuf = new Fl_Text_Buffer();
      o->buffer(clBuf);
      o->wrap_mode(Fl_Text_Display::WRAP_AT_BOUNDS, 0);
    } // Fl_Text_Display* compilerCommandLine
    { Fl_Text_Editor* o = customFlags = new Fl_Text_Editor(655, 395, 375, 40, "custom flags:");
      customFlags->textsize(12);
      customFlags->callback((Fl_Callback*)cb_customFlags);
      customFlags->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      customFlagsBuf = new Fl_Text_Buffer();
      o->buffer(customFlagsBuf);
    } // Fl_Text_Editor* customFlags
    { Fl_Group* o = new Fl_Group(754, 572, 194, 28, "output settings:");
      o->color(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_LEFT));
      { btnWrap = new Fl_Check_Button(754, 572, 28, 28, "wrap");
        btnWrap->down_box(FL_DOWN_BOX);
        btnWrap->callback((Fl_Callback*)cb_btnWrap);
      } // Fl_Check_Button* btnWrap
      { btnScroll = new Fl_Check_Button(806, 572, 72, 28, "scroll");
        btnScroll->down_box(FL_DOWN_BOX);
        btnScroll->callback((Fl_Callback*)cb_btnScroll);
      } // Fl_Check_Button* btnScroll
      { btnStdout = new Fl_Check_Button(860, 572, 28, 28, "stdout");
        btnStdout->down_box(FL_DOWN_BOX);
        btnStdout->callback((Fl_Callback*)cb_btnStdout);
      } // Fl_Check_Button* btnStdout
      { btnStderr = new Fl_Check_Button(920, 572, 28, 28, "stderr");
        btnStderr->down_box(FL_DOWN_BOX);
        btnStderr->callback((Fl_Callback*)cb_btnStderr);
      } // Fl_Check_Button* btnStderr
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  srcCode->linenumber_width(16);
  return w;
}

int main(int argc, char **argv) {
  Gui gui;
  Fl_Double_Window *w = gui.make_window();
  onGuiFinished(&gui);
  Fl::add_idle(onIdle, &gui);
  w->end();
  w->show();
  int rc = Fl::run();
  onExit();
  return rc;
  /* fluid will insert Fl::run() here... */
  return Fl::run();
}
